Í∞Ä„Ö°-- üö´ Transcript Ï§ëÎ≥µ Î∞©ÏßÄÎ•º ÏúÑÌïú DB Ï†úÏïΩ Ï°∞Í±¥ Ï∂îÍ∞Ä
-- Í∞ôÏùÄ ÏÑ∏ÏÖòÏóêÏÑú Í∞ôÏùÄ ÌÖçÏä§Ìä∏Í∞Ä Ï§ëÎ≥µ Ï†ÄÏû•ÎêòÎäî Í≤ÉÏùÑ ÏôÑÏ†ÑÌûà Ï∞®Îã®

-- 1. Í∏∞Ï°¥ Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
-- DELETE FROM transcripts 
-- WHERE id NOT IN (
--   SELECT MIN(id) 
--   FROM transcripts 
--   GROUP BY session_id, original_text
-- );

-- 2. Unique constraint Ï∂îÍ∞Ä (Í∞ôÏùÄ ÏÑ∏ÏÖòÏóêÏÑú Í∞ôÏùÄ ÌÖçÏä§Ìä∏ Ï§ëÎ≥µ Î∞©ÏßÄ)
ALTER TABLE transcripts 
ADD CONSTRAINT unique_session_text 
UNIQUE (session_id, original_text);

-- 3. Index Ï∂îÍ∞ÄÎ°ú ÏÑ±Îä• Ìñ•ÏÉÅ
CREATE INDEX IF NOT EXISTS idx_transcripts_session_text 
ON transcripts(session_id, original_text);

-- 4. Translation cache Ï§ëÎ≥µ Î∞©ÏßÄ Í∞ïÌôî
ALTER TABLE translation_cache 
ADD CONSTRAINT unique_content_hash_language 
UNIQUE (content_hash, target_language);

-- 5. Index Ï∂îÍ∞Ä
CREATE INDEX IF NOT EXISTS idx_translation_cache_content_hash_lang 
ON translation_cache(content_hash, target_language);

-- 6. Transcript status ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú Ìï®Ïàò
CREATE OR REPLACE FUNCTION update_transcript_translation_status()
RETURNS TRIGGER AS $$
BEGIN
  -- translation_cacheÏóê Ìï¥Îãπ transcriptÏùò Î≤àÏó≠Ïù¥ ÏûàÏúºÎ©¥ statusÎ•º 'completed'Î°ú ÏóÖÎç∞Ïù¥Ìä∏
  IF EXISTS (
    SELECT 1 FROM translation_cache 
    WHERE transcript_id = NEW.id
  ) THEN
    UPDATE transcripts 
    SET translation_status = 'completed' 
    WHERE id = NEW.id;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 7. Trigger Ï∂îÍ∞Ä
DROP TRIGGER IF EXISTS trigger_update_transcript_status ON translation_cache;
CREATE TRIGGER trigger_update_transcript_status
  AFTER INSERT ON translation_cache
  FOR EACH ROW
  EXECUTE FUNCTION update_transcript_translation_status();

-- 8. Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ (Ï§ëÎ≥µ Ï†úÍ±∞)
-- Í∞ôÏùÄ session_idÏôÄ original_textÎ•º Í∞ÄÏßÑ Ï§ëÎ≥µ Î†àÏΩîÎìú Ï§ë Í∞ÄÏû• Ïò§ÎûòÎêú Í≤ÉÎßå ÎÇ®Í∏∞Í≥† ÏÇ≠Ï†ú
WITH duplicates AS (
  SELECT id,
         ROW_NUMBER() OVER (
           PARTITION BY session_id, original_text 
           ORDER BY created_at ASC
         ) as rn
  FROM transcripts
)
DELETE FROM transcripts 
WHERE id IN (
  SELECT id FROM duplicates WHERE rn > 1
);

-- 9. ÌÜµÍ≥Ñ ÌôïÏù∏
SELECT 
  'transcripts' as table_name,
  COUNT(*) as total_records,
  COUNT(DISTINCT session_id) as unique_sessions,
  COUNT(DISTINCT original_text) as unique_texts
FROM transcripts
UNION ALL
SELECT 
  'translation_cache' as table_name,
  COUNT(*) as total_records,
  COUNT(DISTINCT content_hash) as unique_hashes,
  COUNT(DISTINCT target_language) as unique_languages
FROM translation_cache; 